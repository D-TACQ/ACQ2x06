#!/usr/local/bin/expect

set outfile "/sys/bus/i2c/devices/1-0068/si5326_reg"

if { $::argc <= 0 } {
	puts {USAGE: load.si5326 [-o file] regmap}
	exit 1
}

set state "look4regmap"

foreach arg $::argv {
#	puts "state:$state arg:$arg"
	if {$state == "look4regmap"} {
		if {$arg == "-o"} {
			set state "look4outfile"
		} else {
			set regmap $arg
			break
		}
	} elseif {$state == "look4outfile"} {
		set outfile $arg
		set state "look4regmap"
	} else {
		puts "state error:$state"
		exit 1
	}
}

if {![file exists $regmap]} {
	set regmap2 "/etc/si5326.d/$regmap"
	if {[file exists $regmap2]} {
		set regmap $regmap2
	} else {
		puts "regmap $regmap NOT found"
		exit 1
	}
}
	
puts "done: here with outfile:$outfile regmap:$regmap"

proc write_reg {reg value} {
	global outfile
	if {$outfile == "-"} {
		puts "$reg $value"
	} else {
		set fout [open $outfile w]
		puts $fout "$reg $value"
		close $fout
	}
}

proc read_reg {reg} {
	global outfile
	if {$outfile == "-"} {
		puts "$reg"
	} else {
		set fout [open $outfile w]
                puts $fout "$reg"
                close $fout
		set fin [open $outfile r]
		puts [gets $fin]
		close $fin
	}
}



proc process {kv} {
	if {[regexp {([0-9]+), 0x([0-9A-F]+)} $kv dontcare key value]} {
#		puts "key $key value $value"
		write_reg $key 0x$value
	} elseif {[regexp {([0-9]+), ([0-9A-F]+)h} $kv dontcare key value]} {
#		puts "key $key value $value"
		write_reg $key 0x$value
	} elseif {[regexp {([0-9]+), (([0-9A-F]+)} $kv dontcare key value]} {
		write_reg $key $value
	} elseif {[regexp {([0-9]+)} $kv dontcare key]} {
		read_reg $key
	} else {
		puts "regexp fail $kv"
	}
}
set fin [open $regmap r]
fconfigure $fin -buffering line
gets $fin data
while {$data != ""} {
	if {[string index $data 0] != "#"} {
		process $data
#		puts $data
	}
	gets $fin data
}
close $fin

set descr [exec basename $regmap]
set fs [open /etc/acq400/0/si5326config w]
regsub si5326_ $descr "" descr
regsub .txt $descr "" descr
puts $fs $descr
close $fs

set fs [open /etc/acq400/0/si5326bypass w]
set bp [regexp bypass $descr]
puts $fs $bp
close $fs



