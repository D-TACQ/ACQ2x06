#!/usr/bin/expect


set FIN [lindex $argv 0]
set FOUT [lindex $argv 1]

set FINMIN	2e3
set FINMAX	1e8
set FOUTMIN	2e3
set FOUTMAX	1e8

set FOSC_MIN	4.85e9
set FOSC_MAX	5.67e9
set FOSC_MID	[expr ($FOSC_MAX + $FOSC_MIN)/2]

if {$FIN < $FINMIN} {
	puts "ERROR: FIN < $FINMIN"
	exit 1;
} elseif {$FIN > $FINMAX} {
	puts "ERROR: FIN > $FINMAX"
	exit 1
} elseif {$FOUT < $FOUTMIN} {
	puts "ERROR: FOUT < $FOUTMIN"
	exit 1
} elseif { $FOUT > $FOUTMAX} {
	puts "ERROR: FOUT > $FOUTMAX"
	exit 1
}



set N2_HS	{11 10 9 8 7 6 5 4}
set F3_MIN	2e3
set F3_MAX	[expr min(2e6, $FIN)]
set N2_LSMAX 	[expr 1<<20]
set N3_MAX	[expr 1<<20]

proc pc_error {f1 f2} {
	return [expr abs($f1-$f2)/$f2 * 100]
}



proc solveN2N3 {solution} {
	upvar $solution sol
	global N2_HS F3_MIN F3_MAX N2_LSMAX FIN FOUT
	
	set fosc [dict get $sol fosc]
	for {set n3 1} {[expr $FIN/$n3] > $F3_MAX} {incr n3} {}
	set f3 [expr $FIN/$n3]
	dict set sol f3 $f3
	dict set sol n3 $n3
	
	array set solutions {}
	
	puts "solveN2N3 solving fosc $fosc f3 $f3"
	foreach n2_hs $N2_HS {
		set n2_ls [expr int(ceil($fosc/$n2_hs/$f3))]
		if {[expr $n2_ls & 0x1]} {
			incr n2_ls
		}
		set fosca [expr $FIN*$n2_hs*$n2_ls/$n3]
		set foscerr [pc_error $fosc $fosca]
		
		puts "solveN2N3: n2_hs $n2_hs error [pc_error $fosc $fosca] %"
		
		set tmp $sol
		dict set tmp n2_ls $n2_ls
		dict set tmp n2_hs $n2_hs
		dict set tmp fosca $fosca
		dict set tmp foscerr $foscerr
		set solutions($n2_hs) $tmp
	}
	
	set min_err 100
	set min_key 0
	foreach n2_hs [array names solutions] {
		set foscerr [dict get $solutions($n2_hs) foscerr]
		#puts "hello key:$n2_hs foscerr:$foscerr"
		if {$foscerr < $min_err} {
			set min_err $foscerr
			set min_key $n2_hs
		}
	}
	puts "The winner is: $min_key $min_err"
	set sol $solutions($min_key)
	return 1
}

puts "calculating FIN:$FIN FOUT:$FOUT"

set N1_HS {4 5 6 7 8 9 10 11}

set N1_LSMAX [expr 1<<20]

set N1_MIN [expr ceil($FOSC_MIN/$FOUT)]
set N1_MAX [expr floor($FOSC_MAX/$FOUT)]


proc solveN1 {solution} {
	upvar $solution sol
	global FOUT FOSC_MID N1_LSMAX 
	
	set fosc $FOSC_MID
	set n1_hs [dict get $sol n1_hs]	
	set n1_min $n1_hs
	set n1_max [expr $n1_hs * $N1_LSMAX]
	
	set n1_ls [expr int($fosc / $FOUT / $n1_hs)]
	
	if {$n1_ls >= $N1_LSMAX} {
		puts "n1_ls too big $n1_ls > $N1_LSMAX"
		return 0
	} elseif { [expr $n1_ls & 0x01] } {
#		puts "n1_ls is NOT EVEN"
		incr n1_ls
	}
	set fosc [expr $FOUT * $n1_hs * $n1_ls]
#	puts "fosc_min [format %.2e $fosc_min] fosc_max [format %.2e $fosc_max]"
	puts "n1_hs $n1_hs n1_ls $n1_ls fosc [format %.2e $fosc]"
		
	dict set sol n1_ls $n1_ls
	dict set sol fosc $fosc
	return 1
}
proc showSolution {solution} {
	upvar $solution sol
	global FIN FOUT
	foreach key [dict keys $sol] {
		if {[string first f $key] >=0 || [string first F $key] >= 0} {
			puts "solution $key [format %.3e [dict get $sol $key]]"
		} else {
			puts "solution $key [dict get $sol $key]"
		}		
	}
	set fosc [expr $FIN*[dict get $sol n2_hs]*[dict get $sol n2_ls]/[dict get $sol n3]]
	puts "check fosc [format %.2e $fosc]"
	set fout [expr $fosc/[dict get $sol n1_hs]/[dict get $sol n1_ls]]
	puts "check FOUT $FOUT fout [format %.3e $fout] err: [format %.3f [pc_error $fout $FOUT]] %"
}

proc putBW {solution} {
	puts [format "%d 0x%02x" 2 0x42]
}
proc putN2 {solution} {
	upvar $solution sol

	set n2_hs [dict get $sol n2_hs]
	set n2_ls [expr [dict get $sol n2_ls] - 1]
	
	puts [format "%d 0x%02x" 40 [expr ($n2_hs-4) << 4 | $n2_ls >> 16]]
	puts [format "%d 0x%02x" 41 [expr ($n2_ls>>8) & 0x00ff]]
	puts [format "%d 0x%02x" 42 [expr $n2_ls & 0x0ff]]
}


proc putN31 {solution} {
	upvar $solution sol
	set n31 [expr [dict get $sol n3] - 1]
	
	puts [format "%d 0x%02x" 43 [expr $n31 >> 16]]
	puts [format "%d 0x%02x" 44 [expr ($n31 >> 8) & 0x0ff]]
	puts [format "%d 0x%02d" 45 [expr $n31 & 0x0ff]];
}

proc putN1 {solution} {
	upvar $solution sol
	set n1_hs [dict get $sol n1_hs]
	set n1_ls [expr [dict get $sol n1_ls] - 1]	
	
	puts [format "%d 0x%02x" 25 [expr ($n1_hs - 4) << 5]]
	puts [format "%d 0x%02x" 31 [expr ($n1_ls >> 16) & 0x0ff]]
	puts [format "%d 0x%02x" 32 [expr ($n1_ls >> 8) & 0x0ff]]
	puts [format "%d 0x%02x" 33 [expr $n1_ls & 0x0ff]]
}

proc putICAL {solution} {
	puts [format "%d 0x%02x" 136 0x40]
}
proc dumpSolution {solution} {
	upvar $solution sol
	putBW sol
	putN1 sol
	putN2 sol
	putN31 sol
	putICAL sol
}

foreach n1_hs $N1_HS {
	set solution [dict create n1_hs $n1_hs]
	if {[solveN1 solution] == 1} {
		if {[solveN2N3 solution] == 1} {			
			showSolution solution
			dumpSolution solution
		}
	}
}


